name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-push-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/mvntmct:latest

      - name: Deploy on remote server via SSH
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT || '22' }}
          timeout: 120
          script: |
            set -e

            # (Optional) Docker login on remote host (in case of private image or rate limits)
            echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin || true

            # Pull latest image
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/mvntmct:latest

            # Stop & remove previous container if present
            if [ "$(docker ps -q -f name=myapp)" ]; then
              docker stop myapp || true
              docker rm myapp || true
            fi

            # Remove old image (optional)
            if docker images -q ${{ secrets.DOCKERHUB_USERNAME }}/mvntmct:latest > /dev/null 2>&1; then
              docker rmi ${{ secrets.DOCKERHUB_USERNAME }}/mvntmct:latest || true
            fi

            # Run the container (host 8082 -> container 8080)
            docker run -d --restart unless-stopped -p 8082:8080 --name myapp ${{ secrets.DOCKERHUB_USERNAME }}/mvntmct:latest
