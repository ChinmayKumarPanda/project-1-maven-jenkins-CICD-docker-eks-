name: Build and Deploy to EC2

on:
  push:
    branches:
      - main
  workflow_dispatch:

# default envs (override via repo variables or workflow_dispatch inputs if needed)
env:
  IMAGE_NAME: myapp
  IMAGE_TAG: latest
  CONTAINER_NAME: myapp
  HOST_PORT: 3000
  CONTAINER_PORT: 3000
  APP_DIR: /home/ec2-user/myapp

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: âœ… Checkout repository
        uses: actions/checkout@v4

      - name: ðŸš€ Copy repo to EC2 (SCP)
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_SSH_USER }}          # e.g. ec2-user or ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}               # private key PEM contents
          port: ${{ secrets.EC2_SSH_PORT }}             # optional, defaults to 22 in action if empty
          source: "./"
          target: "${{ env.APP_DIR }}"

      - name: ðŸ–¥ Build & Run Docker on EC2 (via SSH)
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_SSH_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: ${{ secrets.EC2_SSH_PORT }}
          script: |
            set -euo pipefail
            APP_DIR="${{ env.APP_DIR }}"
            IMAGE="${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}"
            CONTAINER="${{ env.CONTAINER_NAME }}"
            HOST_PORT=${{ env.HOST_PORT }}
            CONTAINER_PORT=${{ env.CONTAINER_PORT }}

            echo "â†’ Changing to app dir: $APP_DIR"
            cd "$APP_DIR"

            echo "â†’ Building docker image: $IMAGE"
            # ensure Dockerfile exists
            if [ ! -f Dockerfile ]; then
              echo "ERROR: Dockerfile not found in $APP_DIR" >&2
              exit 1
            fi

            # Build image (use sudo if docker requires it)
            if docker info >/dev/null 2>&1; then
              docker build -t "$IMAGE" .
            else
              sudo docker build -t "$IMAGE" .
            fi

            echo "â†’ Stopping old container if exists..."
            if docker ps -a --format '{{.Names}}' | grep -x "$CONTAINER" >/dev/null 2>&1; then
              if docker ps --format '{{.Names}}' | grep -x "$CONTAINER" >/dev/null 2>&1; then
                docker stop "$CONTAINER" || sudo docker stop "$CONTAINER" || true
              fi
              docker rm "$CONTAINER" || sudo docker rm "$CONTAINER" || true
            fi

            echo "â†’ Running new container..."
            # remove old image mapping if exists (optional)
            docker run -d --restart unless-stopped \
              --name "$CONTAINER" \
              -p "$HOST_PORT":"$CONTAINER_PORT" \
              "$IMAGE" || sudo docker run -d --restart unless-stopped \
              --name "$CONTAINER" \
              -p "$HOST_PORT":"$CONTAINER_PORT" \
              "$IMAGE"

            echo "â†’ Cleanup dangling images (optional)"
            docker image prune -f || sudo docker image prune -f || true

            echo "âœ… Deployment finished."

      - name: âœ… Verify container is running
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_SSH_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: ${{ secrets.EC2_SSH_PORT }}
          script: |
            echo "ðŸ”Ž docker ps (filter by name)"
            docker ps --filter "name=${{ env.CONTAINER_NAME }}" --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}" || sudo docker ps --filter "name=${{ env.CONTAINER_NAME }}" --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
